@page "/threat-detection"
@using ZTACS.Shared.Models
@inject HttpClient Http
@inject AuthenticationStateProvider AuthProvider

<AuthorizeView>
    <Authorized>
        <MudPaper Class="pa-6 mx-auto mt-10" MaxWidth="500px" Style="background-color:#1e1e2f; color: #f5f5f5;">
            <MudText Typo="Typo.h5" Class="mb-4">🔍 Threat Detection</MudText>

            <MudTextField @bind-Value="IpToCheck" Label="IP Address"
                          Color="Color.Primary" Variant="Variant.Filled"
                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.NetworkCheck" />

            <MudTextField @bind-Value="Device" Label="Device"
                          Color="Color.Primary" Variant="Variant.Filled"
                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.PhoneIphone" Class="mt-3" />

            <MudTextField @bind-Value="Endpoint" Label="Endpoint Accessed"
                          Color="Color.Primary" Variant="Variant.Filled"
                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Http" Class="mt-3" />

            <MudButton OnClick="RunAnalysis" Variant="Variant.Filled"
                       Color="Color.Secondary" Class="mt-4"
                       StartIcon="@Icons.Material.Filled.Search">
                Analyze
            </MudButton>

            @if (!string.IsNullOrEmpty(Status))
            {
                <MudAlert Severity="Severity.Info" Class="mt-4" Variant="Variant.Outlined">
                    @Status
                </MudAlert>
            }
        </MudPaper>
    </Authorized>

    <NotAuthorized>
        <MudPaper Class="pa-6 mx-auto mt-10" MaxWidth="500px" Style="background-color:#1e1e2f; color: #f5f5f5;">
            <MudText Typo="Typo.h6">🚫 You are not authorized</MudText>
            <MudButton Href="/login" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">Login</MudButton>
        </MudPaper>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string IpToCheck;
    private string Device;
    private string Endpoint;
    private string Status;

    private async Task RunAnalysis()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.Identity?.IsAuthenticated == true
            ? user.FindFirst(ClaimTypes.NameIdentifier)?.Value
              ?? user.FindFirst("sub")?.Value
              ?? "anonymous"
            : "anonymous";


        var req = new ThreatDetectionRequest
        {
            Ip = IpToCheck,
            Device = Device,
            Endpoint = Endpoint,
            Timestamp = DateTime.UtcNow,
            UserId = userId
        };

        var response = await Http.PostAsJsonAsync("api/ThreatDetection/detect", req);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<ThreatDetectionResponse>();
            Status = $"🛡️ Status: {result.Status}\n📊 Risk: {result.RiskScore}\n📝 Reasons: {result.Reason}";
        }
        else
        {
            Status = "❌ Error analyzing the threat. Try again.";
        }
    }
}
