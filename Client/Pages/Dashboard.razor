@page "/dashboard"
@inject HttpClient Http
@inject IJSRuntime JS
@using MudBlazor
@using ZTACS.Shared.Entities

<AuthorizeView>
    <Authorized>
        <PageTitle>ZTACS Dashboard</PageTitle>

        <MudText Typo="Typo.h4" Class="mb-4">ZTACS Threat Summary</MudText>

        <MudGrid>
            <MudItem xs="12" sm="3">
                <MudCard Class="pa-4" Style="background-color:#ffffff;">
                    <MudText Typo="Typo.subtitle1" Style="color:#000000;">Total Logs</MudText>
                    <MudText Typo="Typo.h5" Style="color:#000000;">@Stats?.Total</MudText>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="3">
                <MudCard Class="pa-4" Style="background-color:#ffe6e6;">
                    <MudText Typo="Typo.subtitle1" Style="color:#b00020;">Blocked</MudText>
                    <MudText Typo="Typo.h5" Style="color:#b00020;">@Stats?.Logs.Count(e => e.Status == "blocked")</MudText>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="3">
                <MudCard Class="pa-4" Style="background-color:#fff6e6;">
                    <MudText Typo="Typo.subtitle1" Style="color:#b36b00;">Suspicious</MudText>
                    <MudText Typo="Typo.h5" Style="color:#b36b00;">@Stats?.Logs.Count(e => e.Status == "suspicious")</MudText>
                </MudCard>
            </MudItem>

            <MudItem xs="12" sm="3">
                <MudCard Class="pa-4" Style="background-color:#e6fff2;">
                    <MudText Typo="Typo.subtitle1" Style="color:#007d5e;">Clean</MudText>
                    <MudText Typo="Typo.h5" Style="color:#007d5e;">@Stats?.Logs.Count(e => e.Status == "clean")</MudText>
                </MudCard>
            </MudItem>
        </MudGrid>

        <MudDivider Class="my-4" />

        @if (ChartData.Any())
        {
            <MudPaper Elevation="3" Class="p-4 rounded-lg">
                <MudStack Spacing="2">
                    <MudText Typo="Typo.h6">📊 Threat Level Chart</MudText>

                    <MudSelect T="int" Label="Chart Type" Value="@selectedType" ValueChanged="@UpdateChartType" Dense Class="w-48">
                        @foreach (var entry in ChartTypes)
                        {
                            <MudSelectItem Value="@entry.Key">@entry.Value</MudSelectItem>
                        }
                    </MudSelect>

                    <div style="width:100%; height:400px; position: relative;">
    <canvas @ref="CanvasRef" id="threatChart" width="1080" height="400"></canvas>
</div>

                </MudStack>
            </MudPaper>
        }

        <MudButton StartIcon="@Icons.Material.Filled.Refresh"
                   OnClick="LoadStats"
                   Variant="Variant.Filled"
                   Class="mt-4">
            Refresh
        </MudButton>
    </Authorized>

    <NotAuthorized>
        <MudPaper Class="pa-6 mx-auto mt-10"
                  MaxWidth="500px"
                  Style="background-color:#1e1e2f; color: #f5f5f5;">
            <MudText Typo="Typo.h6">🚫 You are not authorized</MudText>
            <MudButton Href="/login" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">Login</MudButton>
        </MudPaper>
    </NotAuthorized>
</AuthorizeView>

@code {
    private LogResponse? Stats;
    private List<ChartPoint> ChartData = new();
    private int selectedType = 0;
    private object? ChartJsConfig;
    private ElementReference CanvasRef;
    private bool _chartRendered;

    private readonly Dictionary<int, string> ChartTypes = new()
    {
        { 0, "bar" },
        { 1, "line" },
        { 2, "pie" },
        { 3, "doughnut" },
        { 4, "scatter" },
        { 5, "radar" },
        { 6, "polarArea" }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadStats();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ChartJsConfig != null && !_chartRendered)
        {
            await JS.InvokeVoidAsync("renderChartFromElement", CanvasRef, ChartJsConfig);
            _chartRendered = true;
        }
    }

    private async Task LoadStats()
    {
        Stats = await Http.GetFromJsonAsync<LogResponse>(
            "api/ThreatDetection/logs?ip=&status=&page=0&pageSize=100000");

        if (Stats != null)
        {
            ChartData = Stats.Logs
                .Select(e => new ChartPoint(e.Status, (double)(e.Score ?? 0), e.Timestamp))
                .ToList();

            PrepareChartConfig();
            _chartRendered = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void PrepareChartConfig()
    {
        var type = ChartTypes[selectedType];

        if (type is "pie" or "doughnut" or "polarArea" or "radar")
        {
            var grouped = ChartData
                .GroupBy(p => p.Label)
                .Select(g => new
                {
                    Label = g.Key,
                    Value = g.Sum(p => p.Value)
                }).ToList();

            ChartJsConfig = new
            {
                type,
                data = new
                {
                    labels = grouped.Select(g => g.Label).ToArray(),
                    datasets = new[]
                    {
                        new
                        {
                            label = "Threat Summary",
                            data = grouped.Select(g => g.Value).ToArray(),
                            backgroundColor = new[] { "#ef5350", "#ffa726", "#66bb6a", "#42a5f5", "#ab47bc" }
                        }
                    }
                },
                options = new { responsive = true }
            };
        }
        else
        {
            ChartJsConfig = new
            {
                type,
                data = new
                {
                    labels = ChartData.Select(p => p.Timestamp.TimeOfDay).ToArray(),
                    datasets = new[]
                    {
                        new
                        {
                            label = "Threat Score",
                            data = ChartData.Select(p => p.Value).ToArray(),
                            backgroundColor = "#1e88e5",
                            borderColor = "#0d47a1",
                            fill = false
                        }
                    }
                },
                options = new { responsive = true }
            };
        }
    }

    private async Task UpdateChartType(int value)
    {
        selectedType = value;
        PrepareChartConfig();
        _chartRendered = false;
        await InvokeAsync(StateHasChanged);
    }
}
