@page "/admin/threat-logs"
@using ZTACS.Shared.Entities
@inject HttpClient Http
@inject NavigationManager Nav

<AuthorizeView>
    <Authorized>
        <MudPaper Class="pa-4 mt-6" Style="background-color:#1e1e2f; color: #fff;">
            <MudText Typo="Typo.h5">🧠 Threat Detection Logs</MudText>

            <!-- Filters -->
            <MudGrid Class="mb-4">
                <MudItem xs="12" sm="6">
                    <MudTextField T="string" @bind-Value="ipFilter" Label="Filter by IP" Variant="Variant.Filled" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudSelect T="string" Label="Filter by Status" @bind-Value="statusFilter" Variant="Variant.Filled">
                        <MudSelectItem Value=@("")>All</MudSelectItem>
                        <MudSelectItem Value=@("clean")>Clean</MudSelectItem>
                        <MudSelectItem Value=@("suspicious")>Suspicious</MudSelectItem>
                        <MudSelectItem Value=@("blocked")>Blocked</MudSelectItem>
                    </MudSelect>
                </MudItem>
            </MudGrid>

            <MudButton OnClick="ApplyFilters" Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.FilterAlt">
                Apply Filters
            </MudButton>

            <!-- Table with Pagination -->
            <MudTable ServerData="LoadServerData"
                      Hover="true"
                      Dense="true"
                      Class="mt-4"
                      RowsPerPage="10"
                      @ref="table"
                      Bordered="true"
                      Breakpoint="Breakpoint.Sm"
                      Elevation="1"
                      Loading="@loading">
                <ToolBarContent>
                    <MudText Typo="Typo.subtitle1" Class="ml-2">Page @((table?.CurrentPage ?? 0) + 1)</MudText>
                </ToolBarContent>

                <HeaderContent>
                    <MudTh>User ID</MudTh>
                    <MudTh>IP</MudTh>
                    <MudTh>Device</MudTh>
                    <MudTh>Endpoint</MudTh>
                    <MudTh>Score</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Timestamp</MudTh>
                </HeaderContent>

                <RowTemplate Context="con">
                    <MudTd DataLabel="User ID">@con.UserId</MudTd>
                    <MudTd DataLabel="IP">@con.Ip</MudTd>
                    <MudTd DataLabel="Device">@con.Device</MudTd>
                    <MudTd DataLabel="Endpoint">@con.Endpoint</MudTd>
                    <MudTd DataLabel="Score">@con.Score</MudTd>
                    <MudTd DataLabel="Status">@con.Status</MudTd>
                    <MudTd DataLabel="Timestamp">@con.Timestamp.ToLocalTime()</MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    </Authorized>
    <NotAuthorized>
        <MudAlert Severity="Severity.Error">You are not authorized to view this page.</MudAlert>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string ipFilter;
    private string statusFilter;
    private MudTable<LoginEvent> table;
    private bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        ipFilter = query["ip"];
        statusFilter = query["status"];
    }

    private async Task<TableData<LoginEvent>> LoadServerData(TableState state,CancellationToken c= new())
    {
        var queryParams = new List<string>
        {
            $"page={state.Page + 1}",
            $"pageSize={state.PageSize}"
        };

        if (!string.IsNullOrWhiteSpace(ipFilter))
            queryParams.Add($"ip={ipFilter}");

        if (!string.IsNullOrWhiteSpace(statusFilter))
            queryParams.Add($"status={statusFilter}");

        var url = $"api/ThreatDetection/logs?{string.Join("&", queryParams)}";

        var logs = await Http.GetFromJsonAsync<List<LoginEvent>>(url);
        return new TableData<LoginEvent>
        {
            Items = logs,
            TotalItems = logs.Count // Replace with actual count from API if available
        };
    }

    private async Task ApplyFilters()
    {
        Nav.NavigateTo($"/admin/threat-logs?ip={ipFilter}&status={statusFilter}", forceLoad: true);
    }
}
