@page "/admin/threat-logs"
@using ZTACS.Shared.Entities
@inject HttpClient Http
@inject NavigationManager Nav

<AuthorizeView>
    <Authorized>
        <MudPaper Class="pa-4 mt-6" Style="background-color:#1e1e2f; color: #fff;">
            <MudText Typo="Typo.h5">🧠 Threat Detection Logs</MudText>

            <!-- Filters -->
            <MudGrid Class="mb-4">
                <MudItem xs="12" sm="6">
                    <MudTextField T="string" @bind-Value="ipFilter" Label="Filter by IP" Variant="Variant.Filled" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudSelect T="string" Label="Filter by Status" @bind-Value="statusFilter" Variant="Variant.Filled">
                        <MudSelectItem Value=@("")>All</MudSelectItem>
                        <MudSelectItem Value=@("clean")>Clean</MudSelectItem>
                        <MudSelectItem Value=@("suspicious")>Suspicious</MudSelectItem>
                        <MudSelectItem Value=@("blocked")>Blocked</MudSelectItem>
                    </MudSelect>
                </MudItem>
            </MudGrid>

            <MudButton OnClick="ApplyFilters" Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.FilterAlt">
                Apply Filters
            </MudButton>

            <MudTable T="LoginEvent"
                      @ref="table"
                      ServerData="LoadServerData"
                      RowsPerPage="@pageSize"
                      Breakpoint="Breakpoint.Sm"
                      Bordered="true"
                      Hover="true"
                      Dense="true"
                      Elevation="1"
                      Class="mt-4"
                      @bind-CurrentPage="@currentPage">

                <HeaderContent>
                    <MudTh>User ID</MudTh>
                    <MudTh>IP</MudTh>
                    <MudTh>Device</MudTh>
                    <MudTh>Endpoint</MudTh>
                    <MudTh>Score</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Timestamp</MudTh>
                </HeaderContent>

                <RowTemplate Context="con">
                    <MudTd DataLabel="User ID">@con.UserId</MudTd>
                    <MudTd DataLabel="IP">@con.Ip</MudTd>
                    <MudTd DataLabel="Device">@con.Device</MudTd>
                    <MudTd DataLabel="Endpoint">@con.Endpoint</MudTd>
                    <MudTd DataLabel="Score">@con.Score</MudTd>
                    <MudTd DataLabel="Status">@con.Status</MudTd>
                    <MudTd DataLabel="Timestamp">@con.Timestamp.ToLocalTime()</MudTd>
                </RowTemplate>

                <PagerContent>
                    <MudIconButton Icon="@Icons.Material.Filled.ChevronLeft"
                                   Disabled="@(currentPage == 0)"
                                   OnClick="PreviousPage" />

                    <MudText Class="mx-2">
                        Page @(currentPage) of @totalPages
                    </MudText>

                    <MudIconButton Icon="@Icons.Material.Filled.ChevronRight"
                                   Disabled="@((currentPage) >= totalPages)"
                                   OnClick="NextPage" />
                </PagerContent>
            </MudTable>


        </MudPaper>
    </Authorized>
    <NotAuthorized>
        <MudAlert Severity="Severity.Error">You are not authorized to view this page.</MudAlert>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string ipFilter;
    private string statusFilter;
    private MudTable<LoginEvent> table;
    private bool loading = false;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalItems;
    private int totalPages => (int)Math.Ceiling((double)totalItems / pageSize);
    private bool canPrevious => currentPage > 1;
    private bool canNext => currentPage < totalPages;
    protected override async Task OnInitializedAsync()
    {
        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        ipFilter = query["ip"];
        statusFilter = query["status"];
    }

    private async Task<TableData<LoginEvent>> LoadServerData(TableState state,CancellationToken c = new())
    {
        currentPage = state.Page;

        var url = $"api/ThreatDetection/logs?ip={ipFilter}&status={statusFilter}$page={currentPage}&pageSize={10}";
        var response = await Http.GetFromJsonAsync<(List<LoginEvent>,int)>(url);

        totalItems = response.Item2; // Ideally you'd get total count separately from API
        return new TableData<LoginEvent> { Items = response.Item1, TotalItems = totalItems };
    }

    private async Task PreviousPage()
    {
        if (currentPage >= 0)
        {
            currentPage--;
            await table.ReloadServerData();
        }
    }

    private async Task NextPage()
    {
        if ((currentPage) < totalPages)
        {
            currentPage++;
            await table.ReloadServerData();
        }
    }

    private async Task ApplyFilters()
    {
        var uri = new Uri(Nav.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        query["ip"] = ipFilter;
        query["status"] = statusFilter;

        var newUri = $"{uri.GetLeftPart(UriPartial.Path)}?{query}";
        Nav.NavigateTo(newUri, forceLoad: false); // Won't reload
        await table.ReloadServerData(); // Actually update table
    }
    public class PagedResult<T>
{
    public List<T> Items { get; set; }
    public int TotalCount { get; set; }
}
}
