@page "/admin/threat-logs"
@inject HttpClient Http
@inject NavigationManager Nav

<AuthorizeView>
    <Authorized>
        <MudPaper Class="pa-4 mt-6" Style="background-color:#1e1e2f; color: #fff;">
            <MudText Typo="Typo.h5">🧠 Threat Detection Logs</MudText>

            <!-- Filters -->
            <MudGrid Class="mb-4">
                <MudItem xs="12" sm="6">
                    <MudTextField T="string" @bind-Value="ipFilter" Label="Filter by IP" Variant="Variant.Filled" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudSelect T="string" Label="Filter by Status" @bind-Value="statusFilter" Variant="Variant.Filled">
                        <MudSelectItem Value=@("")>All</MudSelectItem>
                        <MudSelectItem Value=@("clean")>Clean</MudSelectItem>
                        <MudSelectItem Value=@("suspicious")>Suspicious</MudSelectItem>
                        <MudSelectItem Value=@("blocked")>Blocked</MudSelectItem>
                    </MudSelect>
                </MudItem>
            </MudGrid>

            <MudButton OnClick="ApplyFilters" Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.FilterAlt">
                Apply Filters
            </MudButton>

            <MudTable T="LoginEvent"
                      @ref="table"
                      ServerData="LoadServerData"
                      RowsPerPage="@pageSize"
                      Breakpoint="Breakpoint.Sm"
                      Bordered="true"
                      Hover="true"
                      Dense="true"
                      Elevation="1"
                      Class="mt-4"
                      @bind-CurrentPage="@currentPage">

                <HeaderContent>
                    <MudTh>User ID</MudTh>
                    <MudTh>IP</MudTh>
                    <MudTh>Device</MudTh>
                    <MudTh>Endpoint</MudTh>
                    <MudTh>Score</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Timestamp</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>

                <RowTemplate Context="row">
                    @<MudTr>
                        <MudTd>@row.UserId</MudTd>
                        <MudTd>@row.Ip</MudTd>
                        <MudTd>@row.Device</MudTd>
                        <MudTd>@row.Endpoint</MudTd>
                        <MudTd>@row.Score</MudTd>
                        <MudTd>@row.Status</MudTd>
                        <MudTd>@row.Timestamp.ToLocalTime()</MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.ExpandMore"
                                           OnClick="@(() => ToggleExpanded(row.Id))" />
                        </MudTd>
                    </MudTr>

                    @if (expandedId == row.Id)
                    {
                        <MudTr>
                            <MudTd ColSpan="8" Class="pa-0">
                                @if (expandedDetail is null)
                                {
                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                }
                                else
                                {
                                    <MudPaper Class="pa-3">
                                        <MudGrid>
                                            <MudItem xs="12" sm="6">
                                                <MudText><b>User ID:</b> @expandedDetail.UserId</MudText>
                                                <MudText><b>Device:</b> @expandedDetail.Device</MudText>
                                                <MudText><b>Endpoint:</b> @expandedDetail.Endpoint</MudText>
                                                <MudText><b>User Agent:</b> @expandedDetail.UserAgent</MudText>
                                            </MudItem>
                                            <MudItem xs="12" sm="6">
                                                <MudText><b>Location:</b> @expandedDetail.City, @expandedDetail.Country</MudText>
                                                <MudText><b>ISP:</b> @expandedDetail.ISP</MudText>
                                                <MudText><b>ASN:</b> @expandedDetail.ASN</MudText>
                                                <MudText><b>Whitelisted:</b> @expandedDetail.IsWhitelisted</MudText>
                                                <MudText><b>Blocked:</b> @expandedDetail.IsBlocked</MudText>
                                            </MudItem>
                                            <MudItem xs="12">
                                                <MudText><b>Request Headers:</b></MudText>
                                                <MudList T="string" Dense="true">
                                                    @foreach (var h in expandedDetail.RequestHeaders ?? Array.Empty<string>())
                                                    {
                                                        <MudListItem>@h</MudListItem>
                                                    }
                                                </MudList>
                                            </MudItem>
                                        </MudGrid>
                                    </MudPaper>
                                }
                            </MudTd>
                        </MudTr>
                    }
                </RowTemplate>

                <PagerContent>
                    <MudStack Direction="Row" AlignItems="AlignItems.Center" JustifyContent="Justify.FlexStart" Spacing="1">
                        <MudIconButton Icon="@Icons.Material.Filled.ChevronLeft"
                                       Disabled="@(currentPage == 0)"
                                       OnClick="@PreviousPage" />

                        <MudText Class="mx-2">
                            Page @(currentPage + 1) of @totalPages
                        </MudText>

                        <MudIconButton Icon="@Icons.Material.Filled.ChevronRight"
                                       Disabled="@((currentPage + 1) >= totalPages)"
                                       OnClick="@NextPage" />
                    </MudStack>
                </PagerContent>
            </MudTable>



        </MudPaper>
    </Authorized>
    <NotAuthorized>
        <MudAlert Severity="Severity.Error">You are not authorized to view this page.</MudAlert>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string? ipFilter;
    private string? statusFilter;
    private MudTable<LoginEvent>? table;
    private bool loading = false;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalItems;
    private int totalPages => (int)Math.Ceiling((double)totalItems / pageSize);
    private bool canPrevious => currentPage > 1;
    private bool canNext => currentPage < totalPages;
    List<LogEventDetail> Logs = new();
    Guid? expandedId;
    LogEventDetail? expandedDetail;
    protected override async Task OnInitializedAsync()
    {
        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        ipFilter = query["ip"];
        statusFilter = query["status"];
    }

    private async Task<TableData<LoginEvent>> LoadServerData(TableState state, CancellationToken c = new())
    {


        var url = $"api/ThreatDetection/logs?ip={ipFilter}&status={statusFilter}&page={currentPage}&pageSize={10}";
        var response = await Http.GetFromJsonAsync<LogResponse>(url);

        totalItems = response.Total; // Ideally you'd get total count separately from API
        return new TableData<LoginEvent> { Items = response.Logs, TotalItems = totalItems };
    }

    private async Task PreviousPage()
    {
        if (currentPage >= 0)
        {
            currentPage--;
            await table.ReloadServerData();
        }
    }

    private async Task NextPage()
    {
        if ((currentPage) < totalPages)
        {
            currentPage++;
            await table.ReloadServerData();
        }
    }

    private async Task ApplyFilters()
    {
        var uri = new Uri(Nav.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        query["ip"] = ipFilter;
        query["status"] = statusFilter;

        var newUri = $"{uri.GetLeftPart(UriPartial.Path)}?{query}";
        Nav.NavigateTo(newUri, forceLoad: false); // Won't reload
        await table.ReloadServerData(); // Actually update table
    }
    public class PagedResult<T>
    {
        public List<T> Items { get; set; }
        public int TotalCount { get; set; }
    }

    async void ToggleExpanded(Guid id)
    {
        if (expandedId == id)
        {
            expandedId = null;
            expandedDetail = null;
            return;
        }

        expandedId = id;
        expandedDetail = null;

        // 🔁 Simulate async fetch (replace with your service/API call)
        await Task.Delay(200); // optional spinner delay
        expandedDetail = await FetchDetailById(id);
    }

    async Task<LogEventDetail> FetchDetailById(Guid id)
    {
        var url = $"api/ThreatDetection/logs/{id}";
        var response = await Http.GetFromJsonAsync<LogEventDetail>(url);
        return response ?? new LogEventDetail();
    }

}
