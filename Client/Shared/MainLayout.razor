@using MudBlazor
@using System.Security.Claims
@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JS

<MudThemeProvider @bind-IsDarkMode="@(true)" Theme="theme"/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout Class="mud-layout">

    <MudAppBar Elevation="2" Color="Color.Primary">
        @if (IsAuthenticated)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="ToggleState"/>
        }

        <MudText Typo="Typo.h6" Class="ml-2">ZTACS</MudText>

        <MudSpacer/>

        @if (IsAuthenticated)
        {
            <MudText Class="mr-2">@UserName</MudText>
            <MudButton Variant="Variant.Text" Color="Color.Inherit" Href="/logout" StartIcon="@Icons.Material.Filled.Logout">
                Logout
            </MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Href="/login" StartIcon="@Icons.Material.Filled.Login">
                Login
            </MudButton>
        }
    </MudAppBar>

    <AuthorizeView>
        <Authorized Context="authContext">
            <MudDrawer Open="@State" Elevation="1" Variant="DrawerVariant.Mini" Class="drawer-content">
                <div class="d-flex justify-center mb-4">
                    <a title="ZTACS by BHB" @onclick="ToggleState" class="ztacs-logo-link">
                        @if (State)
                        {
                            <img src="images/ztacs-logo.svg" alt="ZTACS Logo" style="height:48px;"/>
                        }
                        else
                        {
                            <svg xmlns="http://www.w3.org/2000/svg"
                                 viewBox="0 0 100 100"
                                 height="48"
                                 class="ztacs-logo-svg">
                                <path d="@GetShieldPath()" fill="@GetColor()"/>
                                <text x="50%" y="60%" text-anchor="middle" fill="#fff"
                                      font-size="18" font-family="Arial" dy=".3em">
                                    ZTACS
                                </text>
                            </svg>
                        }
                    </a>
                </div>

                <style>
                    .ztacs-logo-link {
                        transition: transform 0.2s ease;
                    }

                    .ztacs-logo-link:hover {
                        transform: scale(1.1);
                    }

                    .ztacs-logo-svg {
                        transition: fill 0.3s ease;
                    }
                </style>

                <MudNavMenu>
                    <MudNavLink Href="/dashboard" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
                    <MudNavGroup Title="Reports" Icon="@Icons.Material.Filled.Report">
                        <MudNavLink Href="/threat-logs" Icon="@Icons.Material.Filled.People">Threat Logs</MudNavLink>
                    </MudNavGroup>
                    <MudNavLink Href="/profile" Icon="@Icons.Material.Filled.Person">Profile</MudNavLink>

                    @if (IsAdmin(authContext.User))
                    {
                        <MudNavLink Href="/admin" Icon="@Icons.Material.Filled.AdminPanelSettings">Admin</MudNavLink>
                    }
                </MudNavMenu>
            </MudDrawer>

            <MudMainContent Class="p-4 mud-main-content">
                @Body
            </MudMainContent>
        </Authorized>

        <NotAuthorized>
            <!-- No Drawer for unauthenticated users -->
            <MudMainContent Class="p-4 mud-main-content">
                @Body
            </MudMainContent>
        </NotAuthorized>
    </AuthorizeView>
</MudLayout>

@code {
    public bool State = false;
    private string UserName = "";
    private bool IsAuthenticated = false;

    private readonly MudTheme theme = new()
    {
        PaletteDark = new PaletteDark()
        {
            Primary = "#4caf50",
            Secondary = "#03dac6",
            Background = "#121212",
            Surface = "#1e1e1e",
            DrawerBackground = "#1b1b1b",
            DrawerText = "#ffffff",
            DrawerIcon = "#4caf50",
            AppbarBackground = "#1e1e1e",
            AppbarText = "#ffffff",
            TextPrimary = "#ffffff",
            TextSecondary = "#b0b0b0",
            ActionDefault = "#90caf9",
            Success = "#4caf50",
            Warning = "#ffb300",
            Error = "#f44336",
            Info = "#29b6f6"
        },
        LayoutProperties = new LayoutProperties()
        {
            DefaultBorderRadius = "6px"
        }
    };

    private void ToggleState() => State = !State;

    private string GetShieldPath() =>
        "M50 5L90 25v30c0 30-25 40-40 40S10 85 10 55V25L50 5z";

    private string GetColor() => "#4caf50";

    private bool IsAdmin(ClaimsPrincipal user) =>
        user.IsInRole("Admin") || user.Claims.Any(c =>
            (string.Equals(c.Type, ClaimTypes.Role, StringComparison.OrdinalIgnoreCase) ||
             string.Equals(c.Type, "roles", StringComparison.OrdinalIgnoreCase))
            && string.Equals(c.Value, "Admin", StringComparison.OrdinalIgnoreCase));


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        IsAuthenticated = user.Identity?.IsAuthenticated == true;

        if (IsAuthenticated)
        {
            UserName = user.Identity?.Name ?? user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "Wow We missed your name.";
        }
    }

}