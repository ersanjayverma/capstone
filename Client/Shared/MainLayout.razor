@using MudBlazor
@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="@_theme"/>
    <MudLayout>

        <!-- 🔶 App Bar -->
        <MudAppBar Elevation="4" Color="Color.Primary">
            <MudText Typo="Typo.h6" Class="ml-2">ZTACS</MudText>
            <MudSpacer />
            <AuthorizeView>
                <Authorized>
                    <MudText Typo="Typo.body1" Class="mr-2">@context.User.Identity?.Name</MudText>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="OnLogoutClicked">Logout</MudButton>
                </Authorized>
                <NotAuthorized>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="OnLoginClicked">Login</MudButton>
                </NotAuthorized>
            </AuthorizeView>
        </MudAppBar>
<AuthorizeView>
<Authorized Context="main">
        <!-- 🔷 Drawer -->
        <MudDrawer Open="true" Elevation="1" Variant="DrawerVariant.Mini">
            <MudNavMenu>
                <MudNavLink Href="/" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
                <MudNavLink Href="/profile" Icon="@Icons.Material.Filled.Person">Profile</MudNavLink>
                <MudNavLink Href="/admin" Icon="@Icons.Material.Filled.AdminPanelSettings">Admin</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
        <!-- 🟩 Main Content -->
        <MudMainContent Class="p-4">

            @Body
        </MudMainContent>
 </Authorized>
        <NotAuthorized>
        <!-- 🟩 Main Content -->
         <MudMainContent Class="p-4">
        <h3>You are not logged in. Please log in.</h3>
                @Body
         </MudMainContent>
        </NotAuthorized>
</AuthorizeView>
  
    </MudLayout>


@code {
    private bool _isDarkMode = true;
    private MudTheme _theme = new();
    private void OnLoginClicked() => Navigation.NavigateTo("login", forceLoad: true);
    private void OnLogoutClicked() => Navigation.NavigateTo("logout",forceLoad: true);

    
    protected override async Task OnInitializedAsync()
    {
        await UpdateUserInfoAsync();

        AuthStateProvider.AuthenticationStateChanged += async (task) =>
        {
            await InvokeAsync(async () =>
            {
                await UpdateUserInfoAsync();
                StateHasChanged(); // update UI
            });
        };
    }
     private async Task UpdateUserInfoAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        await InvokeAsync(StateHasChanged);
    }
}

